# The One True Podfile for CI/CD

# Sets the minimum iOS version for your entire app and its pods.
platform :ios, '14.0'

# This block defines the 'flutter_root' and then uses it to load the
# helper script that contains the 'flutter_install_all_ios_pods' function.
def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get has been run first."
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter/Generated.xcconfig and running flutter pub get."
end

require File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper')


target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  # --- STEP 1: Run Flutter's standard hooks FIRST ---
  # This establishes the baseline build settings for all pods.
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end

  # --- STEP 2: Apply our targeted fix LAST ---
  # This runs after Flutter's hooks and overrides the setting for Firebase pods,
  # ensuring our fix is the final word.
  installer.pods_project.targets.each do |target|
    if target.name.include?('Firebase')
      puts "Fixing non-modular includes for #{target.name}"
      target.build_configurations.each do |config|
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      end
    end
  end
end